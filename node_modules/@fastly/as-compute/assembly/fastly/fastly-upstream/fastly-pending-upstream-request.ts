// Copyright 2020 Fastly, Inc.

import { Request, Response, Body, Headers, Status } from "@fastly/as-fetch";

import {
  FastlyUpstreamRequest,
  FastlyUpstreamRequestInit,
} from "./fastly-upstream-request";

import { FastlyUpstreamResponse } from "./fastly-upstream-response";

import {
  PendingRequestHandle,
  ResponseHandle,
  BodyHandle,
  fastly_http_req_pending_req_wait,
} from "../abi/abi";

import { FASTLY_STATUS } from "../abi/fastly-shared";

class FastlyPendingUpstreamRequestInit extends FastlyUpstreamRequestInit {
  url: string;
}

export class FastlyPendingUpstreamRequest extends Request {
  _pendingRequestHandle: PendingRequestHandle;
  _backend: string;

  constructor(
    pendingRequestHandle: PendingRequestHandle,
    backend: string,
    init: FastlyPendingUpstreamRequestInit
  ) {
    super(init.url, {
      method: init.method,
      headers: init.headers,
      body: null,
    });

    // Set our members
    this._pendingRequestHandle = pendingRequestHandle;
    this._backend = backend;
  }

  wait(): FastlyUpstreamResponse {
    // Create the pointers for our response
    let respHandleOutPointer = __alloc(4);
    let respBodyHandleOutPointer = __alloc(4);

    // Wait for the request to resolve
    let reqWaitStatus = fastly_http_req_pending_req_wait(
      this._pendingRequestHandle,
      respHandleOutPointer,
      respBodyHandleOutPointer
    );
    if (FASTLY_STATUS.isError(reqWaitStatus)) {
      throw new Error("Pending Request could not wait");
    }

    let responseHandle = load<u32>(respHandleOutPointer);
    let responseBodyHandle = load<u32>(respBodyHandleOutPointer);
    __free(respHandleOutPointer);
    __free(respBodyHandleOutPointer);

    let response = new FastlyUpstreamResponse(
      this._url,
      responseHandle,
      responseBodyHandle
    );
    return response;
  }
}

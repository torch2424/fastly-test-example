// Copyright 2020 Fastly, Inc.

// Bitfields for the cache override tag
const NONE: u32 = 0;
const PASS: u32 = 1 << 0;
const TTL: u32 = 1 << 1;
const STALE_WHILE_REVALIDATE: u32 = 1 << 2;
const PCI: u32 = 1 << 3;

/**
 * CacheOverride configures the caching behavior of a {@linkcode Response}.
 * Normally, the HTTP Headers on a Response would control how the Response is cached,
 * but CacheOverride can be set on a {@linkcode Request}, to override the fufilled Response Headers,
 * and define custom caching behavior.
 */
export class CacheOverride {
  private _hasPass: boolean = false;
  private _hasTTL: boolean = false;
  private _ttl: u32 = 0;
  private _hasSWR: boolean = false;
  private _swr: u32 = 0; // stale while revalidate (swr)

  constructor() {}

  /**
   * Enable the pass flag on the cache override.
   */
  setPass(): void {
    this._hasPass = true;
  }

  /**
   * Returns `true` if the pass is currently set.
   *
   * @returns true if the pass is enabled, false if not.
   */
  hasPass(): boolean {
    return this._hasPass;
  }

  /**
   * Remove and unset the pass flag.
   */
  deletePass(): void {
    this._hasPass = false;
  }

  /**
   * Set the TTL (Time To Live) on the CacheOverride that would be added to a {@linkcode Request}.
   *
   * @param ttl the TTL to set in seconds.
   */
  setTTL(ttl: u32): void {
    this._hasTTL = true;
    this._ttl = ttl;
  }

  /**
   * Get the TTL (Time To Live) set on the CacheOverride that would be added to a {@linkcode Request}.
   *
   * @returns The TTL value (TTL is in seconds).
   */
  getTTL(): u32 {
    return this._ttl;
  }

  /**
   * Returns `true` if the TTL (Time To Live) is currently set.
   *
   * @returns true if a TTL exists, false if not.
   */
  hasTTL(): boolean {
    return this._hasTTL;
  }

  /**
   * Remove and unset the TTL from the CacheOverride that would have been added to a {@linkcode Request}.
   */
  deleteTTL(): void {
    this._hasTTL = false;
    this._ttl = 0;
  }

  /**
   * Set the SWR (stale-while-revalidate) on the CacheOverride which will be added to a {@linkcode Request}.
   *
   * @param swr SWR value in seconds
   */
  setSWR(swr: u32): void {
    this._hasSWR = true;
    this._swr = swr;
  }

  /**
   * Get the SWR (stale-while-revalidate) set on the CacheOverride that would be added to a {@linkcode Request}.
   *
   * @returns The SWR value (SWR is in seconds).
   */
  getSWR(): u32 {
    return this._swr;
  }

  /**
   * Returns `true` if the SWR (stale-while-revalidate) is currently set.
   *
   * @returns true if a SWR exists, false if not.
   */
  hasSWR(): boolean {
    return this._hasSWR;
  }

  /**
   * Remove and unset the SWR (stale-while-revalidate) from the CacheOverride that would have been added to a {@linkcode Request}.
   */
  deleteSWR(): void {
    this._hasSWR = false;
    this._swr = 0;
  }

  /**
   * Get a u32 bitfield representing which flags/values are set on the CacheOverride
   *
   * @hidden
   */
  getTag(): u32 {
    let tag = NONE;

    if (this._hasPass) {
      tag |= PASS;
    }

    if (this._hasTTL) {
      tag |= TTL;
    }

    if (this._hasSWR) {
      tag |= STALE_WHILE_REVALIDATE;
    }

    return tag;
  }
}

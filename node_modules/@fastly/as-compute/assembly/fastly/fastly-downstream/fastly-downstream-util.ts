import { fastly_http_req_downstream_client_ip_addr } from "../abi/abi";

import { FASTLY_STATUS } from "../abi/fastly-shared";

export function getDownstreamIpAddressBytes(): ArrayBuffer {
  // Create our Array buffer for the IP Octet
  let ipOctetBuffer = new ArrayBuffer(16);

  // Our nwritten for the number of bytes being written
  let nwrittenOutPtr = __alloc(4);

  let clientIpStatus = fastly_http_req_downstream_client_ip_addr(
    ipOctetBuffer,
    nwrittenOutPtr
  );
  if (FASTLY_STATUS.isError(clientIpStatus)) {
    throw new Error("Could not get the downstream client IP Address.");
  }

  // Get our number of bytes written
  let nwrittenOut = load<u32>(nwrittenOutPtr);
  __free(nwrittenOutPtr);

  if (nwrittenOut == 4) {
    return ipOctetBuffer.slice(0, 4);
  } else if (nwrittenOut == 16) {
    return ipOctetBuffer;
  } else {
    throw new Error(
      "An unexpected amount of bytes were written when getting the downstream client IP Address."
    );
  }
}

export function getDownstreamIpAddressString(): string {
  let ipOctetBuffer = getDownstreamIpAddressBytes();
  let downstreamIpAddressArray: Array<string> = new Array<string>();

  if (ipOctetBuffer.byteLength == 4) {
    // IPv4
    let ipOctetTypedArray = Uint8Array.wrap(ipOctetBuffer);
    for (let i = 0; i < 4; i++) {
      downstreamIpAddressArray.push(ipOctetTypedArray[i].toString());
    }
    return downstreamIpAddressArray.join(".");
  } else {
    // IPv6
    let ipOctetTypedArray = Uint16Array.wrap(ipOctetBuffer);
    for (let i = 0; i < 8; i++) {
      downstreamIpAddressArray.push(ipOctetTypedArray[i].toString(16));
    }
    return downstreamIpAddressArray.join(":");
  }
}

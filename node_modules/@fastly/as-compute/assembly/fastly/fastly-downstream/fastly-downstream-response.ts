// Copyright 2020 Fastly, Inc.

import { Response, ResponseInit, Body, Headers } from "@fastly/as-fetch";

import {
  ResponseHandle,
  BodyHandle,
  fastly_http_resp_new,
  fastly_http_resp_status_set,
  fastly_http_resp_header_insert,
  fastly_http_resp_send_downstream,
} from "../abi/abi";

import { FASTLY_STATUS, BODY_WRITE_END } from "../abi/fastly-shared";

import {
  isNull,
  writeHeadersToHandle,
  createBodyHandleAndGetWriteableBodyStream,
} from "../../util";

import { WriteableBodyStream } from "../stream/writeable-body-stream";

export class FastlyDownstreamResponse extends Response {
  private _responseHandle: ResponseHandle;
  private _writeableBodyStream: WriteableBodyStream;

  constructor(body: ArrayBuffer | null, init: ResponseInit) {
    // Call our parent constructor
    // passing null to the body here, as we will be handling the
    // body through a body handle
    super(body, init);

    // Get our response handle
    // Allocate a u32 for our host function
    let responseHandlePointer = __alloc(4);
    let responseHandleStatus = fastly_http_resp_new(responseHandlePointer);
    if (FASTLY_STATUS.isError(responseHandleStatus)) {
      throw new Error("Could not get the response handle from the host");
    }
    let responseHandle = load<ResponseHandle>(responseHandlePointer);
    __free(responseHandlePointer);
    this._responseHandle = responseHandle;

    // Get our body handle here, as we may append bodies before we send
    this._writeableBodyStream = createBodyHandleAndGetWriteableBodyStream(
      this._buffer
    );
  }

  _writeResponseStatusToHandle(): void {
    // Get the Response Status
    let respStatusPointer = __alloc(4);
    let respSetStatus = fastly_http_resp_status_set(
      this._responseHandle,
      this.status
    );
  }

  _writeResponseHeadersToHandle(): void {
    // Write our headers to handle
    // Need to use since there is no implements yet
    writeHeadersToHandle(
      this.headers,
      this._responseHandle,
      (
        handle: u32,
        headerNameBuffer: ArrayBuffer,
        headerValueBuffer: ArrayBuffer
      ) => {
        let headerWriteStatus = fastly_http_resp_header_insert(
          handle,
          headerNameBuffer,
          headerNameBuffer.byteLength,
          headerValueBuffer,
          headerValueBuffer.byteLength
        );
        if (FASTLY_STATUS.isError(headerWriteStatus)) {
          throw new Error("Could not insert a response header on the host");
        }
      }
    );
  }

  _getBodyHandle(): BodyHandle {
    return this._writeableBodyStream._getBodyHandle();
  }

  send(): void {
    this._writeResponseStatusToHandle();
    this._writeResponseHeadersToHandle();

    // Use the hostcall to send downstream
    fastly_http_resp_send_downstream(
      this._responseHandle,
      this._getBodyHandle(),
      0
    );
  }

  sendStreaming(): WriteableBodyStream {
    this._writeResponseStatusToHandle();
    this._writeResponseHeadersToHandle();

    // Use the hostcall to send downstream
    fastly_http_resp_send_downstream(
      this._responseHandle,
      this._writeableBodyStream._getBodyHandle(),
      1
    );

    // Create a writeable stream so the user can keep writing
    return this._writeableBodyStream;
  }
}

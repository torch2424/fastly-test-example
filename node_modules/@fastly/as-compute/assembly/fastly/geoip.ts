import { Request, Response, Headers } from "@fastly/as-fetch";
import * as Fastly from "./fastly";
import { JSON } from "assemblyscript-json";

/**
 * As of AssemblyScript 0.18.x,
 * primitive number types in AssemblyScript can't be in an union type
 * e.g `string | null` works, but not `i32 | null`
 * Thus, this is just a wrapper class around AssemblyScript primitives
 * to allow us to return nullable values.
 */
export class GeolocationPrimitive<T> {
  private _value: T;

  constructor(value: T) {
    this._value = value;
  }

  valueOf(): T {
    return this._value;
  }
}

/**
 * AssemblyScript class representation of the Fastly Geolocation JSON Object.
 *
 * The classes uses ES getter functions to access the Geolocation properties that will:
 * A. Return the value (or primitive value wrapper) of the JSON key if it exists, or
 * B. Return null if the key does not exist
 */
export class Geolocation {
  private jsonObj: JSON.Obj;

  constructor(geoJson: string) {
    // Parse out the json object
    this.jsonObj = <JSON.Obj>JSON.parse(geoJson);
  }

  /**
   * The name of the organization associated with as_number.
   *
   * For example, fastly is the value given for IP addresses under AS-54113.
   */
  get as_name(): string | null {
    let as_name = this.jsonObj.getString("as_name");
    if (as_name == null) {
      return null;
    }
    return as_name.valueOf();
  }

  /**
   * [Autonomous system](https://en.wikipedia.org/wiki/Autonomous_system_(Internet)) (AS) number.
   */
  get as_number(): GeolocationPrimitive<i64> | null {
    let as_number = this.jsonObj.getInteger("as_number");
    if (as_number == null) {
      return null;
    }
    return new GeolocationPrimitive<i64>(as_number.valueOf());
  }

  /**
   * The telephone area code associated with an IP address.
   *
   * These are only available for IP addresses in the United States, its territories, and Canada.
   */
  get area_code(): GeolocationPrimitive<i64> | null {
    let area_code = this.jsonObj.getInteger("area_code");
    if (area_code == null) {
      return null;
    }
    return new GeolocationPrimitive<i64>(area_code.valueOf());
  }

  /**
   * City or town name.
   */
  get city(): string | null {
    let city = this.jsonObj.getString("city");
    if (city == null) {
      return null;
    }
    return city.valueOf();
  }

  /**
   * Connection speed.
   */
  get conn_speed(): string | null {
    let conn_speed = this.jsonObj.getString("conn_speed");
    if (conn_speed == null) {
      return null;
    }
    return conn_speed.valueOf();
  }

  /**
   * Connection type.
   */
  get conn_type(): string | null {
    let conn_type = this.jsonObj.getString("conn_type");
    if (conn_type == null) {
      return null;
    }
    return conn_type.valueOf();
  }

  /**
   * Continent.
   */
  get continent(): string | null {
    let continent = this.jsonObj.getString("continent");
    if (continent == null) {
      return null;
    }
    return continent.valueOf();
  }

  /**
   * A two-character [ISO 3166-1](https://en.wikipedia.org/wiki/ISO_3166-1) country code for the country associated with an IP address.
   *
   * The US country code is returned for IP addresses associated with overseas United States military bases.
   *
   * These values include subdivisions that are assigned their own country codes in ISO 3166-1. For example, subdivisions NO-21 and NO-22 are presented with the country code SJ for Svalbard and the Jan Mayen Islands.
   */
  get country_code(): string | null {
    let country_code = this.jsonObj.getString("country_code");
    if (country_code == null) {
      return null;
    }
    return country_code.valueOf();
  }

  /**
   * A three-character [ISO 3166-1 alpha-3](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3) country code for the country associated with the IP address.
   *
   * The USA country code is returned for IP addresses associated with overseas United States military bases.
   */
  get country_code3(): string | null {
    let country_code3 = this.jsonObj.getString("country_code3");
    if (country_code3 == null) {
      return null;
    }
    return country_code3.valueOf();
  }

  /**
   * Country name.
   *
   * This field is the [ISO 3166-1](https://en.wikipedia.org/wiki/ISO_3166-1) English short name for a country.
   */
  get country_name(): string | null {
    let country_name = this.jsonObj.getString("country_name");
    if (country_name == null) {
      return null;
    }
    return country_name.valueOf();
  }

  /**
   * Time zone offset from Greenwich Mean Time (GMT) for `city`.
   */
  get gmt_offset(): string | null {
    let gmt_offset = this.jsonObj.getString("gmt_offset");
    if (gmt_offset == null) {
      return null;
    }
    return gmt_offset.valueOf();
  }

  /**
   * Latitude, in units of degrees from the equator.
   *
   * Values range from -90.0 to +90.0 inclusive, and are based on the [WGS 84](https://en.wikipedia.org/wiki/World_Geodetic_System) coordinate reference system.
   */
  get latitude(): GeolocationPrimitive<f64> | null {
    let latitude = this.jsonObj.getFloat("latitude");
    if (latitude == null) {
      return null;
    }
    return new GeolocationPrimitive<f64>(latitude.valueOf());
  }

  /**
   * Longitude, in units of degrees from the [IERS Reference Meridian](https://en.wikipedia.org/wiki/IERS_Reference_Meridian).
   *
   * Values range from -180.0 to +180.0 inclusive, and are based on the [WGS 84](https://en.wikipedia.org/wiki/World_Geodetic_System) coordinate reference system.
   */
  get longitude(): GeolocationPrimitive<f64> | null {
    let longitude = this.jsonObj.getFloat("longitude");
    if (longitude == null) {
      return null;
    }
    return new GeolocationPrimitive<f64>(longitude.valueOf());
  }

  /**
   * Metro code, representing designated market areas (DMAs) in the United States.
   */
  get metro_code(): GeolocationPrimitive<i64> | null {
    let metro_code = this.jsonObj.getInteger("metro_code");
    if (metro_code == null) {
      return null;
    }
    return new GeolocationPrimitive<i64>(metro_code.valueOf());
  }

  /**
   * The postal code associated with the IP address.
   *
   * These are available for some IP addresses in Australia, Canada, France, Germany, Italy, Spain, Switzerland, the United Kingdom, and the United States.
   *
   * For Canadian postal codes, this is the first 3 characters. For the United Kingdom, this is the first 2-4 characters (outward code). For countries with alphanumeric postal codes, this field is a lowercase transliteration.
   */
  get postal_code(): string | null {
    let postal_code = this.jsonObj.getString("postal_code");
    if (postal_code == null) {
      return null;
    }
    return postal_code.valueOf();
  }

  /**
   * Client proxy description.
   */
  get proxy_description(): string | null {
    let proxy_description = this.jsonObj.getString("proxy_description");
    if (proxy_description == null) {
      return null;
    }
    return proxy_description.valueOf();
  }

  /**
   * Client proxy type.
   */
  get proxy_type(): string | null {
    let proxy_type = this.jsonObj.getString("proxy_type");
    if (proxy_type == null) {
      return null;
    }
    return proxy_type.valueOf();
  }

  /**
   * [ISO 3166-2](https://en.wikipedia.org/wiki/ISO_3166-2) country subdivision code.
   *
   * For countries with multiple levels of subdivision (for example, nations within the United Kingdom), this variable gives the more specific subdivision.
   *
   * This field can be None for countries that do not have ISO country subdivision codes. For example, None is given for IP addresses assigned to the Ã…land Islands (country code AX, illustrated below).
   */
  get region(): string | null {
    let region = this.jsonObj.getString("region");
    if (region == null) {
      return null;
    }
    return region.valueOf();
  }

  /**
   * Time zone offset from coordinated universal time (UTC) for `city`.
   */
  get utc_offset(): GeolocationPrimitive<i64> | null {
    let utc_offset = this.jsonObj.getInteger("utc_offset");
    if (utc_offset == null) {
      return null;
    }
    return new GeolocationPrimitive<i64>(utc_offset.valueOf());
  }
}

/**
 * Function to get Geolocation for an IP Address using the Fastly API.
 *
 * @returns FastlyGeolocation - Object representing the geolocation of the IP Address.
 */
export function getGeolocationForIpAddress(ip: string): Geolocation {
  // Make a Request upstream to our origin
  let headers = new Headers();
  headers.set("Fastly-XQD-API", "geolocation");
  headers.set("Fastly-XQD-arg1", ip);
  let request = new Request("http://www.fastly.com/geolocation", {
    method: "GET",
    headers: headers,
    body: null,
  });
  let response = Fastly.fetch(request, {
    backend: "TheOrigin",
    cacheOverride: null,
  }).wait();

  let responseText = response.text();

  let geo = new Geolocation(responseText);

  return geo;
}

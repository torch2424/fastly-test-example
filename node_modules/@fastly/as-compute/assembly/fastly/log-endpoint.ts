// Copyright 2020 Fastly, Inc.

import { fastly_log_endpoint_get, fastly_log_write } from "./abi/abi";
import { FASTLY_STATUS } from "./abi/fastly-shared";

/**
 * Endpoint for logging through Fastly. Compute@Edge also supports logging through standard out.
 * However, using a Logging Endpoint is the reccomended way for logging on the platform.
 */
export class LogEndpoint {
  /**
   * @hidden
   */
  private _endpointName: string;
  /**
   * @hidden
   */
  private _endpointHandle: u32;

  /**
   * Constructor for a logging endpoint.
   *
   * @param endpointName Name of the endpoint that should be logged to.
   */
  constructor(endpointName: string) {
    this._endpointName = endpointName;
    let nameBuffer = String.UTF8.encode(endpointName);
    let endpointHandleOutPointer = __alloc(4);

    let endpointGetStatus = fastly_log_endpoint_get(
      nameBuffer,
      nameBuffer.byteLength,
      endpointHandleOutPointer
    );
    if (FASTLY_STATUS.isError(endpointGetStatus)) {
      throw new Error("Could not get the endpoint from our fastly hostcall");
    }

    this._endpointHandle = load<u32>(endpointHandleOutPointer);
    __free(endpointHandleOutPointer);
  }

  /**
   * Get the name of the `LogEndpoint` instance.
   *
   * @returns The name of the endpoint.
   */
  getEndpointName(): string {
    return this._endpointName;
  }

  /**
   * Log a message to the endpoint.
   *
   * @param message The message string that should be sent to the endpoint.
   */
  log(message: string): void {
    let messageBuffer = String.UTF8.encode(message);
    let nwrittenOutPointer = __alloc(4);

    let logWriteStatus = fastly_log_write(
      this._endpointHandle,
      messageBuffer,
      messageBuffer.byteLength,
      nwrittenOutPointer
    );
    if (FASTLY_STATUS.isError(logWriteStatus)) {
      throw new Error(
        "Could not write the log message to the " +
          this._endpointName +
          " endpoint"
      );
    }

    let nwrittenOut = load<u32>(nwrittenOutPointer);
    __free(nwrittenOutPointer);

    if (nwrittenOut !== messageBuffer.byteLength) {
      throw new Error(
        "Failed to write the entire log message to the " +
          this._endpointName +
          " endpoint"
      );
    }
  }
}

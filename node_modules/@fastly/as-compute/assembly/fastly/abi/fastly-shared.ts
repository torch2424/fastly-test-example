// Copyright 2020 Fastly, Inc.

import { FastlyStatus, BodyWriteEnd } from "./abi";

export class FASTLY_STATUS {
  /** Success value.
   *
   * This indicates that a hostcall finished successfully.
   */
  static OK: FastlyStatus = 0;
  /** Generic error value.
   *
   * This means that some unexpected error occured during a hostcall.
   */
  static ERROR: FastlyStatus = 1;
  // Invalid argument.
  static INVAL: FastlyStatus = 2;
  /** Invalid handle.
   *
   * Thrown when a request, response, or body handle is not valid.
   */
  static BADF: FastlyStatus = 3;
  /** Buffer length error.
   *
   * Thrown when a buffer is too long.
   */
  static BUFLEN: FastlyStatus = 4;
  /** Unsupported operation error.
   *
   * This error is thrown when some operation cannot be performed, because it is not supported.
   */
  static UNSUPPORTED: FastlyStatus = 5;
  /// Alignment error.
  ///
  /// This is thrown when a pointer does not point to a properly aligned slice of memory.
  static BADALIGN: FastlyStatus = 6;
  /** HTTP parse error.
   *
   * This can be thrown when a method, URI, header, or status is not valid. This can also
   * be thrown if a message head is too large.
   *
   * DEPRECATED: this constant has been deprecated in favor of `HTTPINVALID`
   */
  static HTTPPARSE: FastlyStatus = 7;
  /** Invalid HTTP error.
   *
   * This can be thrown when a method, URI, header, or status is not valid. This can also
   * be thrown if a message head is too large.
   */
  static HTTPINVALID: FastlyStatus = 7;

  /** HTTP user error.
   *
   * This is thrown in cases where user code caused an HTTP error. For example, attempt to send
   * a 1xx response code, or a request with a non-absolute URI. This can also be caused by
   * an unexpected header: both `content-length` and `transfer-encoding`, for example.
   */
  static HTTPUSER: FastlyStatus = 8;
  /** HTTP incomplete message error.
   *
   * This can be thrown when a stream ended unexpectedly.
   */
  static HTTPINCOMPLETE: FastlyStatus = 9;

  static isOk(status: FastlyStatus): boolean {
    return status === FASTLY_STATUS.OK;
  }

  static isError(status: FastlyStatus): boolean {
    return status !== FASTLY_STATUS.OK;
  }
}

export class BODY_WRITE_END {
  static BACK: BodyWriteEnd = 0;
  static FRONT: BodyWriteEnd = 1;
}

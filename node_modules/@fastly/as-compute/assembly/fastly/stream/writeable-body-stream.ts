// Copyright 2020 Fastly, Inc.

import {
  BodyHandle,
  fastly_http_body_write,
  fastly_http_body_close,
} from "../abi/abi";

import { FASTLY_STATUS, BODY_WRITE_END } from "../abi/fastly-shared";

/**
 * WriteableStream to an HTTP Request/Response Body. This is similar to
 * the [Streams API's WriteableStream](https://developer.mozilla.org/en-US/docs/Web/API/WritableStream)
 */
export class WriteableBodyStream {
  /**
   * @hidden
   */
  private _bodyHandle: BodyHandle;

  /**
   * @hidden
   */
  _locked: boolean;

  /**
   * @hidden
   */
  constructor(bodyHandle: BodyHandle) {
    this._bodyHandle = bodyHandle;
    this._locked = false;
  }

  /**
   * @hidden
   */
  _getBodyHandle(): BodyHandle {
    return this._bodyHandle;
  }

  /**
   * Get a {@linkcode WriteableBodyStreamWriter} to the specified associate stream. The stream will be locked to the writer
   * until it closes or releases the lock.
   *
   * @returns {@linkcode WriteableBodyStreamWriter} if the stream isn't locked by another writer, null if the stream is locked.
   */
  getWriter(): WriteableBodyStreamWriter | null {
    if (this._locked) {
      return null;
    }

    const writer = new WriteableBodyStreamWriter(this, this._bodyHandle);

    this._locked = true;

    return writer;
  }

  /**
   * @returns true if the stream is currently locked to a {@linkcode WriteableBodyStreamWriter} for this stream, false it not.
   */
  get locked(): boolean {
    return this._locked;
  }
}

/**
 * Writer to a writeable stream of an HTTP Request/Response Body. This is similar to
 * the [Streams API's WriteableStreamDefaultReader](https://developer.mozilla.org/en-US/docs/Web/API/WritableStreamDefaultWriter)
 */
export class WriteableBodyStreamWriter {
  /**
   * @hidden
   */
  private _writeableStream: WriteableBodyStream;
  /**
   * @hidden
   */
  private _bodyHandle: BodyHandle;
  /**
   * @hidden
   */
  private _closed: boolean;

  /**
   * @hidden
   */
  constructor(writeableStream: WriteableBodyStream, bodyHandle: BodyHandle) {
    this._writeableStream = writeableStream;
    this._bodyHandle = bodyHandle;
    this._closed = false;
  }

  /**
   * @hidden
   */
  _getBodyHandle(): BodyHandle {
    return this._bodyHandle;
  }

  /**
   * Getter for if the writer is closed.
   *
   * @returns true if the writer is closed, false if not.
   */
  get closed(): boolean {
    return this._closed;
  }

  /**
   * Release the lock on the associated WriteableStream that created this writer
   * After releasing the lock, this writer instance is closed.
   */
  releaseLock(): void {
    this._writeableStream._locked = false;
    this._closed = true;
  }

  /**
   * Write a buffer to the body stream.
   *
   * @param responseBodyBuffer `ArrayBuffer` that should be written to the Body Stream.
   */
  write(responseBodyBuffer: ArrayBuffer): void {
    if (this._closed) {
      return;
    }

    let bodyWrittenOutPointer = __alloc(4);
    let bodyWriteStatus = fastly_http_body_write(
      this._bodyHandle,
      responseBodyBuffer,
      responseBodyBuffer.byteLength,
      BODY_WRITE_END.BACK,
      bodyWrittenOutPointer
    );
    if (FASTLY_STATUS.isError(bodyWriteStatus)) {
      throw new Error(
        "Could not write to the body on the host, from the writable stream."
      );
    }
    let bodyWrittenOut = load<u32>(bodyWrittenOutPointer);
    __free(bodyWrittenOutPointer);
  }

  /**
   * Close the writer and the body.
   * This will signify that the streaming is completed.
   */
  close(): void {
    if (this._closed) {
      return;
    }

    let bodyCloseStatus = fastly_http_body_close(this._bodyHandle);
    if (FASTLY_STATUS.isError(bodyCloseStatus)) {
      throw new Error(
        "Could not close to the body on the host, from the writable stream."
      );
    }

    this.releaseLock();
  }
}
